// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoboothBranchService.Infrastructure.Common.Persistence;

#nullable disable

namespace PhotoboothBranchService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240724181023_PhotoBoothVerH20")]
    partial class PhotoBoothVerH20
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountFBID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("BranchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("BranchID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Background", b =>
                {
                    b.Property<Guid>("BackgroundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BackgroundID");

                    b.Property<string>("BackgroundCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BackgroundURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<Guid>("LayoutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("BackgroundID");

                    b.HasIndex("LayoutID");

                    b.ToTable("Backgrounds", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booth", b =>
                {
                    b.Property<Guid>("BoothID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BoothID");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoothName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("BranchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<short>("PeopleInBooth")
                        .HasColumnType("smallint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoothID");

                    b.HasIndex("BranchID");

                    b.ToTable("Booths", (string)null);

                    b.HasData(
                        new
                        {
                            BoothID = new Guid("1671ccd8-d367-47c7-9c48-335da54ec34d"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 01",
                            BranchID = new Guid("b7fb8774-e3ac-4316-862c-23b81869c381"),
                            Concept = "Hallucination",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)5,
                            Status = "Active"
                        },
                        new
                        {
                            BoothID = new Guid("b8b615f3-a04f-4bbf-8ab2-f42dd69a65fd"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 02",
                            BranchID = new Guid("b7fb8774-e3ac-4316-862c-23b81869c381"),
                            Concept = "Nightmare",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)6,
                            Status = "Active"
                        },
                        new
                        {
                            BoothID = new Guid("bc8c737b-9a92-49b2-b9b1-bd8321c7e594"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 03",
                            BranchID = new Guid("0a1f2e05-f744-4d9b-937c-bfe7bad52a90"),
                            Concept = "Nightmare",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)4,
                            Status = "Active"
                        },
                        new
                        {
                            BoothID = new Guid("28110b4a-bf04-4c04-a19b-1b91d976ee7c"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 04",
                            BranchID = new Guid("0a1f2e05-f744-4d9b-937c-bfe7bad52a90"),
                            Concept = "Hallucination",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)3,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BranchID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchID");

                    b.HasIndex("ManagerID")
                        .IsUnique()
                        .HasFilter("[ManagerID] IS NOT NULL");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            BranchID = new Guid("b7fb8774-e3ac-4316-862c-23b81869c381"),
                            Address = "Vincom Le Van Viet q9",
                            BranchName = "Vincom Le Van Viet q9",
                            City = "HCMC",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Town = "district 9"
                        },
                        new
                        {
                            BranchID = new Guid("0a1f2e05-f744-4d9b-937c-bfe7bad52a90"),
                            Address = "Mega Mall Pham Van Dong",
                            BranchName = "Mega Mall Pham Van Dong",
                            City = "Thanh pho Thu Duc",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Town = "Thu Duc"
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Constant", b =>
                {
                    b.Property<string>("ConstantKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanUpdateValue")
                        .HasColumnType("bit");

                    b.Property<int>("ConstantType")
                        .HasColumnType("int");

                    b.Property<string>("ConstantValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.HasKey("ConstantKey");

                    b.ToTable("Constants", (string)null);

                    b.HasData(
                        new
                        {
                            ConstantKey = "DepositPercent",
                            CanUpdateValue = true,
                            ConstantType = 1,
                            ConstantValue = "20",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Percent value of total price when customer choose deposit the session order.",
                            DisplayName = "Deposit percent",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ConstantKey = "RefundPercent",
                            CanUpdateValue = true,
                            ConstantType = 1,
                            ConstantValue = "50",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Percent value of total price when customer cancel the session order.",
                            DisplayName = "Refund percent",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ConstantKey = "BookingDeadline",
                            CanUpdateValue = true,
                            ConstantType = 1,
                            ConstantValue = "45",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The start time for the session order must be at least \"value\" minutes after now. The value is measured in minutes.",
                            DisplayName = "Booking deadline",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ConstantKey = "CancelDeadlineRefund",
                            CanUpdateValue = true,
                            ConstantType = 1,
                            ConstantValue = "30",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The time to cancel the session order must before \"value\" minutes start time. The value is measured in minutes. If not meet condition, the cancel will not refund transactions.",
                            DisplayName = "Cancel deadline to refund",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ConstantKey = "BoothReservationHold",
                            CanUpdateValue = true,
                            ConstantType = 1,
                            ConstantValue = "15",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Time to hold the booth if customer not checkin and pay the rest of bill. Then the order will change to Cancel status.",
                            DisplayName = "Booth reservation hold time",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ConstantKey = "OpenTime",
                            CanUpdateValue = false,
                            ConstantType = 6,
                            ConstantValue = "8:00",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Open time in a day of system, using 24-hour format. With form hh:mm.",
                            DisplayName = "Open time",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ConstantKey = "CloseTime",
                            CanUpdateValue = false,
                            ConstantType = 6,
                            ConstantValue = "23:00",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Open time in a day of system, using 24-hour format. With form hh:mm.",
                            DisplayName = "Close time",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeviceID");

                    b.Property<Guid>("BoothID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeviceID");

                    b.HasIndex("BoothID");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Layout", b =>
                {
                    b.Property<Guid>("LayoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LayoutID");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<string>("LayoutCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LayoutURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("PhotoSlot")
                        .HasColumnType("smallint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("LayoutID");

                    b.ToTable("Layouts", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentMethodID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodID = new Guid("1b4f2a3e-7d94-4119-8b6d-5c15b02848f6"),
                            CreateDate = new DateTime(2024, 7, 24, 18, 10, 23, 439, DateTimeKind.Utc).AddTicks(8646),
                            PaymentMethodName = "VNPay",
                            Status = "Active"
                        },
                        new
                        {
                            PaymentMethodID = new Guid("f3b6e6b2-f90e-4f6b-8cd2-68b467afae0f"),
                            CreateDate = new DateTime(2024, 7, 24, 18, 10, 23, 439, DateTimeKind.Utc).AddTicks(8654),
                            PaymentMethodName = "MoMo",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("PhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoID");

                    b.Property<Guid?>("BackgroundID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("PhotoSessionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoID");

                    b.HasIndex("BackgroundID");

                    b.HasIndex("PhotoSessionID");

                    b.ToTable("Photos", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoBox", b =>
                {
                    b.Property<Guid>("PhotoBoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoBoxID");

                    b.Property<int>("BoxHeight")
                        .HasColumnType("int");

                    b.Property<int>("BoxIndex")
                        .HasColumnType("int");

                    b.Property<int>("BoxWidth")
                        .HasColumnType("int");

                    b.Property<int>("CoordinatesX")
                        .HasColumnType("int");

                    b.Property<int>("CoordinatesY")
                        .HasColumnType("int");

                    b.Property<bool>("IsLandscape")
                        .HasColumnType("bit");

                    b.Property<Guid>("LayoutID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoBoxID");

                    b.HasIndex("LayoutID");

                    b.ToTable("PhotoBox", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSession", b =>
                {
                    b.Property<Guid>("PhotoSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoSessionID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LayoutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SessionIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionOrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalPhotoTaken")
                        .HasColumnType("int");

                    b.HasKey("PhotoSessionID");

                    b.HasIndex("LayoutID");

                    b.HasIndex("SessionOrderID");

                    b.ToTable("PhotoSessions", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSticker", b =>
                {
                    b.Property<Guid>("PhotoStickerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoStickerID");

                    b.Property<Guid>("PhotoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("StickerID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoStickerID");

                    b.HasIndex("StickerID");

                    b.ToTable("PhotoStickers", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Refund", b =>
                {
                    b.Property<Guid>("RefundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RefundDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefundID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Refunds", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.ServicePackage", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Measure")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ServiceID");

                    b.HasIndex("ServiceTypeID");

                    b.ToTable("ServicePackages", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceID = new Guid("6288e0ab-adec-4363-b80f-95abf3053d56"),
                            Measure = 1,
                            Price = 100000m,
                            ServiceDescription = "Make up with Korean stype for 1 people",
                            ServiceName = "Make up with Korean stype for 1 people",
                            ServiceTypeID = new Guid("06167451-8b59-4dd2-bb9e-88df025eead6"),
                            Status = 0
                        },
                        new
                        {
                            ServiceID = new Guid("13e75fc2-f38b-401e-9cd2-c545b80fd1f0"),
                            Measure = 2,
                            Price = 190000m,
                            ServiceDescription = "Make up with Korean stype for 2 people",
                            ServiceName = "Combo make up with Korean stype for 2 people",
                            ServiceTypeID = new Guid("06167451-8b59-4dd2-bb9e-88df025eead6"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.ServiceSession", b =>
                {
                    b.Property<Guid>("ServiceItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionOrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ServiceItemID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("SessionOrderID");

                    b.ToTable("ServiceSessions", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeID");

                    b.ToTable("ServiceTypes", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceTypeID = new Guid("06167451-8b59-4dd2-bb9e-88df025eead6"),
                            ServiceTypeName = "Make up",
                            Status = 1,
                            Unit = "Set"
                        },
                        new
                        {
                            ServiceTypeID = new Guid("fc34dccb-10a0-4643-84bf-71ac85ca77bb"),
                            ServiceTypeName = "Send email",
                            Status = 1,
                            Unit = "Times"
                        },
                        new
                        {
                            ServiceTypeID = new Guid("13bd9e6d-3092-496b-8025-530f5f9c43de"),
                            ServiceTypeName = "Hire booth",
                            Status = 1,
                            Unit = "Minutes"
                        },
                        new
                        {
                            ServiceTypeID = new Guid("70a5a1fd-9c0b-4109-9638-5b6e63e71eca"),
                            ServiceTypeName = "Print photo",
                            Status = 1,
                            Unit = "Times"
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.SessionOrder", b =>
                {
                    b.Property<Guid>("SessionOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SessionOrderID");

                    b.Property<Guid?>("AccountID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoothID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SessionPackageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ValidateCode")
                        .HasColumnType("bigint");

                    b.HasKey("SessionOrderID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BoothID");

                    b.ToTable("SessionOrders", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Sticker", b =>
                {
                    b.Property<Guid>("StickerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StickerID");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<DateTime?>("LastModified")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StickerCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StickerURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("stickerHeight")
                        .HasColumnType("int");

                    b.Property<int>("stickerWidth")
                        .HasColumnType("int");

                    b.HasKey("StickerID");

                    b.ToTable("Stickers", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayTransactionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionOrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("SessionOrderID");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Branch", "BranchBelong")
                        .WithMany("Staffs")
                        .HasForeignKey("BranchID");

                    b.Navigation("BranchBelong");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Background", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Layout", "Layout")
                        .WithMany("Backgrounds")
                        .HasForeignKey("LayoutID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booth", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Branch", "Branch")
                        .WithMany("Booths")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Branch", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Account", "Manager")
                        .WithOne("BranchManage")
                        .HasForeignKey("PhotoboothBranchService.Domain.Entities.Branch", "ManagerID");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Device", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Booth", "Booth")
                        .WithMany("Devices")
                        .HasForeignKey("BoothID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booth");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Photo", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Background", "Background")
                        .WithMany("Photos")
                        .HasForeignKey("BackgroundID");

                    b.HasOne("PhotoboothBranchService.Domain.Entities.PhotoSession", "PhotoSession")
                        .WithMany("Photos")
                        .HasForeignKey("PhotoSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("PhotoSession");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoBox", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Layout", "Layout")
                        .WithMany("PhotoBoxes")
                        .HasForeignKey("LayoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSession", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Layout", "Layout")
                        .WithMany("PhotoSessions")
                        .HasForeignKey("LayoutID");

                    b.HasOne("PhotoboothBranchService.Domain.Entities.SessionOrder", "SessionOrder")
                        .WithMany("PhotoSessions")
                        .HasForeignKey("SessionOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layout");

                    b.Navigation("SessionOrder");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSticker", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Photo", "Photo")
                        .WithMany("PhotoStickers")
                        .HasForeignKey("StickerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Sticker", "Sticker")
                        .WithMany("PhotoSticker")
                        .HasForeignKey("StickerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Sticker");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Refund", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Transaction", "Payment")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.ServicePackage", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.ServiceSession", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.ServicePackage", "Service")
                        .WithMany("ServiceItems")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.SessionOrder", "SessionOrder")
                        .WithMany("ServiceItems")
                        .HasForeignKey("SessionOrderID");

                    b.Navigation("Service");

                    b.Navigation("SessionOrder");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.SessionOrder", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Account", "Account")
                        .WithMany("SessionOrder")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Booth", "Booth")
                        .WithMany("SessionOrders")
                        .HasForeignKey("BoothID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Booth");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.SessionOrder", "SessionOrder")
                        .WithMany("Payments")
                        .HasForeignKey("SessionOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("SessionOrder");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.Navigation("BranchManage")
                        .IsRequired();

                    b.Navigation("SessionOrder");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Background", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booth", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("SessionOrders");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Booths");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Layout", b =>
                {
                    b.Navigation("Backgrounds");

                    b.Navigation("PhotoBoxes");

                    b.Navigation("PhotoSessions");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Photo", b =>
                {
                    b.Navigation("PhotoStickers");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSession", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.ServicePackage", b =>
                {
                    b.Navigation("ServiceItems");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.SessionOrder", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("PhotoSessions");

                    b.Navigation("ServiceItems");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Sticker", b =>
                {
                    b.Navigation("PhotoSticker");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Refunds");
                });
#pragma warning restore 612, 618
        }
    }
}
