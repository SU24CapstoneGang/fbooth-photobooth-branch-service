// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoboothBranchService.Infrastructure.Common.Persistence;

#nullable disable

namespace PhotoboothBranchService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240513200409_PhotoBoothInitialDB")]
    partial class PhotoBoothInitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Account ID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Camera", b =>
                {
                    b.Property<Guid>("CameraID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Camera ID");

                    b.Property<string>("Lens")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PhotoBoothBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CameraID");

                    b.HasIndex("PhotoBoothBranchId")
                        .IsUnique();

                    b.ToTable("Cameras", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("RemaniningUsage")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscountID");

                    b.ToTable("Discounts", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.EffectsPack", b =>
                {
                    b.Property<Guid>("PackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FilterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FrameID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LayoutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PackagePrice")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StickerID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PackID");

                    b.HasIndex("FilterID");

                    b.HasIndex("FrameID");

                    b.HasIndex("LayoutID");

                    b.HasIndex("StickerID");

                    b.ToTable("EffectsPacks", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Filter", b =>
                {
                    b.Property<Guid>("FilterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilterURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("FilterID");

                    b.ToTable("Filters", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.FinalPicture", b =>
                {
                    b.Property<Guid>("PictureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PictureURl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PrintPricingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Privacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PackID")
                        .IsUnique();

                    b.HasIndex("PrintPricingID");

                    b.ToTable("FinalPictures", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Frame", b =>
                {
                    b.Property<Guid>("FrameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrameName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FrameURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("FrameID");

                    b.ToTable("Frames", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Layout", b =>
                {
                    b.Property<Guid>("LayoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("LayoutPrice")
                        .HasColumnType("float");

                    b.Property<string>("LayoutURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LayoutID");

                    b.ToTable("Layouts", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhotoQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("OrderID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoBoothBranch", b =>
                {
                    b.Property<Guid>("BranchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchesID");

                    b.HasIndex("AccountID");

                    b.ToTable("PhotoBoothBranches", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PrintPricing", b =>
                {
                    b.Property<Guid>("PrintPricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("PrintPricingID");

                    b.ToTable("PrintPricings", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Printer", b =>
                {
                    b.Property<Guid>("PrinterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PhotoBoothBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("PrinterID");

                    b.HasIndex("PhotoBoothBranchId")
                        .IsUnique();

                    b.ToTable("Printers", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Session", b =>
                {
                    b.Property<Guid>("SessionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionID");

                    b.HasIndex("BranchesID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Sticker", b =>
                {
                    b.Property<Guid>("StickerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("StickerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrickerURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StickerId");

                    b.ToTable("Stickers", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.TransactionHistory", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FinalPictureNumber")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("CustomerID");

                    b.ToTable("TransactionHistories", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Camera", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.PhotoBoothBranch", "PhotoBoothBranch")
                        .WithOne("Camera")
                        .HasForeignKey("PhotoboothBranchService.Domain.Entities.Camera", "PhotoBoothBranchId");

                    b.Navigation("PhotoBoothBranch");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.EffectsPack", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Filter", "Filter")
                        .WithMany("EffectsPacks")
                        .HasForeignKey("FilterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Frame", "Frame")
                        .WithMany("EffectsPacks")
                        .HasForeignKey("FrameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Layout", "Layout")
                        .WithMany("EffectsPacks")
                        .HasForeignKey("LayoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Sticker", "Sticker")
                        .WithMany("EffectsPacks")
                        .HasForeignKey("StickerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("Frame");

                    b.Navigation("Layout");

                    b.Navigation("Sticker");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.FinalPicture", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Order", "Order")
                        .WithMany("FinalPictures")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.EffectsPack", "EffectsPack")
                        .WithOne("FinalPicture")
                        .HasForeignKey("PhotoboothBranchService.Domain.Entities.FinalPicture", "PackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.PrintPricing", "PrintPricing")
                        .WithMany("FinalPictures")
                        .HasForeignKey("PrintPricingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EffectsPack");

                    b.Navigation("Order");

                    b.Navigation("PrintPricing");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Order", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoBoothBranch", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Account", "Account")
                        .WithMany("PhotoBoothBranches")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Printer", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.PhotoBoothBranch", "PhotoBoothBranch")
                        .WithOne("Printer")
                        .HasForeignKey("PhotoboothBranchService.Domain.Entities.Printer", "PhotoBoothBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhotoBoothBranch");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Session", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.PhotoBoothBranch", "PhotoBoothBranch")
                        .WithMany("Sessions")
                        .HasForeignKey("BranchesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Customer", "Customer")
                        .WithMany("Sessions")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Order", "Order")
                        .WithOne("Session")
                        .HasForeignKey("PhotoboothBranchService.Domain.Entities.Session", "SessionID");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("PhotoBoothBranch");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.TransactionHistory", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Customer", "Customer")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.Navigation("PhotoBoothBranches");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.EffectsPack", b =>
                {
                    b.Navigation("FinalPicture")
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Filter", b =>
                {
                    b.Navigation("EffectsPacks");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Frame", b =>
                {
                    b.Navigation("EffectsPacks");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Layout", b =>
                {
                    b.Navigation("EffectsPacks");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Order", b =>
                {
                    b.Navigation("FinalPictures");

                    b.Navigation("Session")
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoBoothBranch", b =>
                {
                    b.Navigation("Camera")
                        .IsRequired();

                    b.Navigation("Printer")
                        .IsRequired();

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PrintPricing", b =>
                {
                    b.Navigation("FinalPictures");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Sticker", b =>
                {
                    b.Navigation("EffectsPacks");
                });
#pragma warning restore 612, 618
        }
    }
}
