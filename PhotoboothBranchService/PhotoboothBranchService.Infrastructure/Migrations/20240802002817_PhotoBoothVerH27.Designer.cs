// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoboothBranchService.Infrastructure.Common.Persistence;

#nullable disable

namespace PhotoboothBranchService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240802002817_PhotoBoothVerH27")]
    partial class PhotoBoothVerH27
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountFBID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("BranchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("BranchID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Background", b =>
                {
                    b.Property<Guid>("BackgroundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BackgroundID");

                    b.Property<string>("BackgroundCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BackgroundURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<Guid>("LayoutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("BackgroundID");

                    b.HasIndex("LayoutID");

                    b.ToTable("Backgrounds", (string)null);

                    b.HasData(
                        new
                        {
                            BackgroundID = new Guid("fd3d39c7-62c6-4e4e-92a8-4e22a911b511"),
                            BackgroundCode = "9-01.png",
                            BackgroundURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721666194/FBooth-Background/wnnwcfvfdqaqiih3rikm.png",
                            CouldID = "FBooth-Background/wnnwcfvfdqaqiih3rikm",
                            CreatedDate = new DateTime(2024, 7, 22, 23, 36, 34, 296, DateTimeKind.Unspecified).AddTicks(6667),
                            Height = 473,
                            LayoutID = new Guid("4a071101-a8fd-42dd-d91d-08dca62b7b83"),
                            Status = "Available",
                            Width = 709
                        },
                        new
                        {
                            BackgroundID = new Guid("867f6d24-6e2e-4fbd-a718-4c2c891fd826"),
                            BackgroundCode = "4-01.png",
                            BackgroundURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721666311/FBooth-Background/c1jbpjf0xdw4lysrnrbm.png",
                            CouldID = "FBooth-Background/c1jbpjf0xdw4lysrnrbm",
                            CreatedDate = new DateTime(2024, 7, 22, 23, 36, 38, 846, DateTimeKind.Unspecified).AddTicks(6667),
                            Height = 473,
                            LayoutID = new Guid("1799860e-e239-47c6-c5a1-08dca65d7432"),
                            Status = "Available",
                            Width = 709
                        },
                        new
                        {
                            BackgroundID = new Guid("7df5c376-e2c7-47e5-bd86-558b7c7b1fd0"),
                            BackgroundCode = "7-01.png",
                            BackgroundURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721666189/FBooth-Background/hughd2ixfiieefwniuwk.png",
                            CouldID = "FBooth-Background/hughd2ixfiieefwniuwk",
                            CreatedDate = new DateTime(2024, 7, 22, 23, 36, 22, 316, DateTimeKind.Unspecified).AddTicks(6667),
                            Height = 710,
                            LayoutID = new Guid("1306f740-c718-41bb-d91c-08dca62b7b83"),
                            Status = "Available",
                            Width = 473
                        },
                        new
                        {
                            BackgroundID = new Guid("b15f7e3c-ec3f-4f37-9a4d-4693bd0fa05f"),
                            BackgroundCode = "11-01.png",
                            BackgroundURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721666183/FBooth-Background/jqdwh9a2y5vct3qunu7a.png",
                            CouldID = "FBooth-Background/jqdwh9a2y5vct3qunu7a",
                            CreatedDate = new DateTime(2024, 7, 22, 23, 36, 28, 216, DateTimeKind.Unspecified).AddTicks(6667),
                            Height = 473,
                            LayoutID = new Guid("2920f5b2-2cbf-4ed3-7ff3-08dca62a5d8b"),
                            Status = "Available",
                            Width = 709
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingType")
                        .HasColumnType("int");

                    b.Property<Guid>("BoothID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FullPaymentPolicyID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("HireBoothFee")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("ValidateCode")
                        .HasColumnType("bigint");

                    b.HasKey("BookingID");

                    b.HasIndex("BoothID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("FullPaymentPolicyID");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.BookingService", b =>
                {
                    b.Property<Guid>("BookingServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BookingServiceID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ServiceID");

                    b.ToTable("BookingServices", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booth", b =>
                {
                    b.Property<Guid>("BoothID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BoothID");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoothName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("BranchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<short>("PeopleInBooth")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("isBooked")
                        .HasColumnType("bit");

                    b.HasKey("BoothID");

                    b.HasIndex("BranchID");

                    b.ToTable("Booths", (string)null);

                    b.HasData(
                        new
                        {
                            BoothID = new Guid("1671ccd8-d367-47c7-9c48-335da54ec34d"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 01",
                            BranchID = new Guid("b7fb8774-e3ac-4316-862c-23b81869c381"),
                            Concept = "Hallucination",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)5,
                            PricePerHour = 0m,
                            Status = 1,
                            isBooked = false
                        },
                        new
                        {
                            BoothID = new Guid("b8b615f3-a04f-4bbf-8ab2-f42dd69a65fd"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 02",
                            BranchID = new Guid("b7fb8774-e3ac-4316-862c-23b81869c381"),
                            Concept = "Nightmare",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)6,
                            PricePerHour = 0m,
                            Status = 1,
                            isBooked = false
                        },
                        new
                        {
                            BoothID = new Guid("bc8c737b-9a92-49b2-b9b1-bd8321c7e594"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 03",
                            BranchID = new Guid("0a1f2e05-f744-4d9b-937c-bfe7bad52a90"),
                            Concept = "Nightmare",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)4,
                            PricePerHour = 0m,
                            Status = 1,
                            isBooked = false
                        },
                        new
                        {
                            BoothID = new Guid("28110b4a-bf04-4c04-a19b-1b91d976ee7c"),
                            BackgroundColor = "yellow",
                            BoothName = "Booth 04",
                            BranchID = new Guid("0a1f2e05-f744-4d9b-937c-bfe7bad52a90"),
                            Concept = "Hallucination",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleInBooth = (short)3,
                            PricePerHour = 0m,
                            Status = 1,
                            isBooked = false
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BranchID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<Guid?>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchID");

                    b.HasIndex("ManagerID")
                        .IsUnique()
                        .HasFilter("[ManagerID] IS NOT NULL");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            BranchID = new Guid("b7fb8774-e3ac-4316-862c-23b81869c381"),
                            Address = "Vincom Le Van Viet q9",
                            BranchName = "Vincom Le Van Viet q9",
                            City = "HCMC",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = "Active",
                            Town = "district 9"
                        },
                        new
                        {
                            BranchID = new Guid("0a1f2e05-f744-4d9b-937c-bfe7bad52a90"),
                            Address = "Mega Mall Pham Van Dong",
                            BranchName = "Mega Mall Pham Van Dong",
                            City = "Thanh pho Thu Duc",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = "Active",
                            Town = "Thu Duc"
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeviceID");

                    b.Property<Guid>("BoothID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeviceID");

                    b.HasIndex("BoothID");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.FullPaymentPolicy", b =>
                {
                    b.Property<Guid>("FullPaymentPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultPolicy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermanentPolicy")
                        .HasColumnType("bit");

                    b.Property<bool>("NoCheckInTimeLimit")
                        .HasColumnType("bit");

                    b.Property<string>("PolicyDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RefundDaysBefore")
                        .HasColumnType("int");

                    b.Property<int>("RefundPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("FullPaymentPolicyID");

                    b.ToTable("FullPaymentPolicies");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Layout", b =>
                {
                    b.Property<Guid>("LayoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LayoutID");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<string>("LayoutCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LayoutURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("PhotoSlot")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("LayoutID");

                    b.ToTable("Layouts", (string)null);

                    b.HasData(
                        new
                        {
                            LayoutID = new Guid("2920f5b2-2cbf-4ed3-7ff3-08dca62a5d8b"),
                            CouldID = "FBooth-Layout/frtwksfwbszafz8c7h3b",
                            CreatedDate = new DateTime(2024, 7, 17, 13, 37, 40, 750, DateTimeKind.Unspecified),
                            Height = 4730,
                            LayoutCode = "11-01",
                            LayoutURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721198261/FBooth-Layout/frtwksfwbszafz8c7h3b.png",
                            PhotoSlot = (short)4,
                            Status = 1,
                            Width = 7090
                        },
                        new
                        {
                            LayoutID = new Guid("1306f740-c718-41bb-d91c-08dca62b7b83"),
                            CouldID = "FBooth-Layout/fwuzc2ba67ysibm5gccj",
                            CreatedDate = new DateTime(2024, 7, 17, 13, 41, 26, 770, DateTimeKind.Unspecified),
                            Height = 7100,
                            LayoutCode = "7-01",
                            LayoutURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721198486/FBooth-Layout/fwuzc2ba67ysibm5gccj.png",
                            PhotoSlot = (short)3,
                            Status = 1,
                            Width = 4730
                        },
                        new
                        {
                            LayoutID = new Guid("4a071101-a8fd-42dd-d91d-08dca62b7b83"),
                            CouldID = "FBooth-Layout/gjes09uywe0uv3veuz8s",
                            CreatedDate = new DateTime(2024, 7, 17, 13, 41, 42, 850, DateTimeKind.Unspecified),
                            Height = 4730,
                            LayoutCode = "9-01",
                            LayoutURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721198502/FBooth-Layout/gjes09uywe0uv3veuz8s.png",
                            PhotoSlot = (short)3,
                            Status = 1,
                            Width = 7090
                        },
                        new
                        {
                            LayoutID = new Guid("1799860e-e239-47c6-c5a1-08dca65d7432"),
                            CouldID = "FBooth-Layout/d2rcoxdzla53ngpzarv9",
                            CreatedDate = new DateTime(2024, 7, 17, 19, 39, 9, 340, DateTimeKind.Unspecified),
                            Height = 4730,
                            LayoutCode = "4-01",
                            LayoutURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721219948/FBooth-Layout/d2rcoxdzla53ngpzarv9.png",
                            PhotoSlot = (short)1,
                            Status = 1,
                            Width = 7090
                        },
                        new
                        {
                            LayoutID = new Guid("e1bb7b30-909b-491a-7f64-08dcaa6cbb13"),
                            CouldID = "FBooth-Layout/hucotkisjh7y94sirnza",
                            CreatedDate = new DateTime(2024, 7, 22, 23, 38, 35, 183, DateTimeKind.Unspecified).AddTicks(3333),
                            Height = 1920,
                            LayoutCode = "Black Vintage Photo Film Your Story (3)",
                            LayoutURL = "https://res.cloudinary.com/dfxvccyje/image/upload/v1721666315/FBooth-Layout/hucotkisjh7y94sirnza.png",
                            PhotoSlot = (short)1,
                            Status = 1,
                            Width = 1080
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentMethodID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodID = new Guid("1b4f2a3e-7d94-4119-8b6d-5c15b02848f6"),
                            CreateDate = new DateTime(2024, 8, 2, 0, 28, 16, 842, DateTimeKind.Utc).AddTicks(4634),
                            PaymentMethodName = "VNPay",
                            Status = "Active"
                        },
                        new
                        {
                            PaymentMethodID = new Guid("f3b6e6b2-f90e-4f6b-8cd2-68b467afae0f"),
                            CreateDate = new DateTime(2024, 8, 2, 0, 28, 16, 842, DateTimeKind.Utc).AddTicks(4637),
                            PaymentMethodName = "MoMo",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("PhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoID");

                    b.Property<Guid?>("BackgroundID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<Guid>("PhotoSessionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoID");

                    b.HasIndex("BackgroundID");

                    b.HasIndex("PhotoSessionID");

                    b.ToTable("Photos", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoBox", b =>
                {
                    b.Property<Guid>("PhotoBoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoBoxID");

                    b.Property<int>("BoxHeight")
                        .HasColumnType("int");

                    b.Property<int>("BoxIndex")
                        .HasColumnType("int");

                    b.Property<int>("BoxWidth")
                        .HasColumnType("int");

                    b.Property<int>("CoordinatesX")
                        .HasColumnType("int");

                    b.Property<int>("CoordinatesY")
                        .HasColumnType("int");

                    b.Property<bool>("IsLandscape")
                        .HasColumnType("bit");

                    b.Property<Guid>("LayoutID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoBoxID");

                    b.HasIndex("LayoutID");

                    b.ToTable("PhotoBox", (string)null);

                    b.HasData(
                        new
                        {
                            PhotoBoxID = new Guid("74f5f643-3a94-402d-b139-3b2543255f7c"),
                            BoxHeight = 2631,
                            BoxIndex = 0,
                            BoxWidth = 3921,
                            CoordinatesX = 190,
                            CoordinatesY = 170,
                            IsLandscape = false,
                            LayoutID = new Guid("2920f5b2-2cbf-4ed3-7ff3-08dca62a5d8b")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("8e69c79f-09ee-495e-861e-0c60207144d7"),
                            BoxHeight = 1641,
                            BoxIndex = 1,
                            BoxWidth = 2111,
                            CoordinatesX = 190,
                            CoordinatesY = 2940,
                            IsLandscape = false,
                            LayoutID = new Guid("2920f5b2-2cbf-4ed3-7ff3-08dca62a5d8b")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("1e1c3d0b-b7d3-4dc8-9ebd-758f44fef53a"),
                            BoxHeight = 1641,
                            BoxIndex = 2,
                            BoxWidth = 2111,
                            CoordinatesX = 2480,
                            CoordinatesY = 2940,
                            IsLandscape = false,
                            LayoutID = new Guid("2920f5b2-2cbf-4ed3-7ff3-08dca62a5d8b")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("170db2dc-bfa8-4148-b85e-75b52a72b5d4"),
                            BoxHeight = 1641,
                            BoxIndex = 3,
                            BoxWidth = 2101,
                            CoordinatesX = 4780,
                            CoordinatesY = 2940,
                            IsLandscape = false,
                            LayoutID = new Guid("2920f5b2-2cbf-4ed3-7ff3-08dca62a5d8b")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("5fc689f6-8890-43a6-9d7d-59a9c5e10bc3"),
                            BoxHeight = 5080,
                            BoxIndex = 0,
                            BoxWidth = 3460,
                            CoordinatesX = 160,
                            CoordinatesY = 340,
                            IsLandscape = false,
                            LayoutID = new Guid("1306f740-c718-41bb-d91c-08dca62b7b83")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("c98c89af-738e-4034-88a2-9a8982fc22d5"),
                            BoxHeight = 2370,
                            BoxIndex = 1,
                            BoxWidth = 3460,
                            CoordinatesX = 160,
                            CoordinatesY = 5680,
                            IsLandscape = false,
                            LayoutID = new Guid("1306f740-c718-41bb-d91c-08dca62b7b83")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("56d05b8f-6cf4-42f2-a9aa-7d96065b4c94"),
                            BoxHeight = 2370,
                            BoxIndex = 2,
                            BoxWidth = 3460,
                            CoordinatesX = 3480,
                            CoordinatesY = 5680,
                            IsLandscape = false,
                            LayoutID = new Guid("1306f740-c718-41bb-d91c-08dca62b7b83")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("23cb58a4-d569-414d-93f6-96c3e6c60614"),
                            BoxHeight = 3170,
                            BoxIndex = 0,
                            BoxWidth = 4430,
                            CoordinatesX = 1830,
                            CoordinatesY = 1630,
                            IsLandscape = false,
                            LayoutID = new Guid("4a071101-a8fd-42dd-d91d-08dca62b7b83")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("54e510a7-d789-4cf5-ae64-025c38a2ff58"),
                            BoxHeight = 1370,
                            BoxIndex = 1,
                            BoxWidth = 4430,
                            CoordinatesX = 1830,
                            CoordinatesY = 5100,
                            IsLandscape = false,
                            LayoutID = new Guid("4a071101-a8fd-42dd-d91d-08dca62b7b83")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("7cb6bbf5-2fef-47e1-9c28-82b9c599fdd0"),
                            BoxHeight = 1370,
                            BoxIndex = 2,
                            BoxWidth = 4430,
                            CoordinatesX = 1830,
                            CoordinatesY = 6810,
                            IsLandscape = false,
                            LayoutID = new Guid("4a071101-a8fd-42dd-d91d-08dca62b7b83")
                        },
                        new
                        {
                            PhotoBoxID = new Guid("832d5af1-9897-4a6d-a98a-77443df1b4e2"),
                            BoxHeight = 3686,
                            BoxIndex = 0,
                            BoxWidth = 5529,
                            CoordinatesX = 1000,
                            CoordinatesY = 1022,
                            IsLandscape = false,
                            LayoutID = new Guid("1799860e-e239-47c6-c5a1-08dca65d7432")
                        });
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSession", b =>
                {
                    b.Property<Guid>("PhotoSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoSessionID");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LayoutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SessionIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalPhotoTaken")
                        .HasColumnType("int");

                    b.HasKey("PhotoSessionID");

                    b.HasIndex("BookingID");

                    b.HasIndex("LayoutID");

                    b.ToTable("PhotoSessions", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSticker", b =>
                {
                    b.Property<Guid>("PhotoStickerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PhotoStickerID");

                    b.Property<Guid>("PhotoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("StickerID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoStickerID");

                    b.HasIndex("StickerID");

                    b.ToTable("PhotoStickers", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Refund", b =>
                {
                    b.Property<Guid>("RefundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayTransactionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefundDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefundID");

                    b.HasIndex("TransactionID");

                    b.ToTable("Refunds", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Sticker", b =>
                {
                    b.Property<Guid>("StickerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StickerID");

                    b.Property<string>("CouldID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<DateTime?>("LastModified")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'SE Asia Standard Time')");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StickerCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StickerURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("stickerHeight")
                        .HasColumnType("int");

                    b.Property<int>("stickerWidth")
                        .HasColumnType("int");

                    b.HasKey("StickerID");

                    b.ToTable("Stickers", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayTransactionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("BookingID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Branch", "BranchBelong")
                        .WithMany("Staffs")
                        .HasForeignKey("BranchID");

                    b.Navigation("BranchBelong");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Background", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Layout", "Layout")
                        .WithMany("Backgrounds")
                        .HasForeignKey("LayoutID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booking", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Booth", "Booth")
                        .WithMany("Bookings")
                        .HasForeignKey("BoothID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.FullPaymentPolicy", "FullPaymentPolicy")
                        .WithMany("Bookings")
                        .HasForeignKey("FullPaymentPolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Booth");

                    b.Navigation("FullPaymentPolicy");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.BookingService", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingID");

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Service", "Service")
                        .WithMany("BookingServices")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booth", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Branch", "Branch")
                        .WithMany("Booths")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Branch", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Account", "Manager")
                        .WithOne("BranchManage")
                        .HasForeignKey("PhotoboothBranchService.Domain.Entities.Branch", "ManagerID");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Device", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Booth", "Booth")
                        .WithMany("Devices")
                        .HasForeignKey("BoothID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booth");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Photo", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Background", "Background")
                        .WithMany("Photos")
                        .HasForeignKey("BackgroundID");

                    b.HasOne("PhotoboothBranchService.Domain.Entities.PhotoSession", "PhotoSession")
                        .WithMany("Photos")
                        .HasForeignKey("PhotoSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("PhotoSession");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoBox", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Layout", "Layout")
                        .WithMany("PhotoBoxes")
                        .HasForeignKey("LayoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSession", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Booking", "Booking")
                        .WithMany("PhotoSessions")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Layout", "Layout")
                        .WithMany("PhotoSessions")
                        .HasForeignKey("LayoutID");

                    b.Navigation("Booking");

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSticker", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Photo", "Photo")
                        .WithMany("PhotoStickers")
                        .HasForeignKey("StickerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.Sticker", "Sticker")
                        .WithMany("PhotoSticker")
                        .HasForeignKey("StickerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Sticker");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Refund", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Refunds")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PhotoboothBranchService.Domain.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoboothBranchService.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Account", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("BranchManage")
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Background", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("Payments");

                    b.Navigation("PhotoSessions");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Booth", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Booths");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.FullPaymentPolicy", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Layout", b =>
                {
                    b.Navigation("Backgrounds");

                    b.Navigation("PhotoBoxes");

                    b.Navigation("PhotoSessions");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Photo", b =>
                {
                    b.Navigation("PhotoStickers");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.PhotoSession", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Service", b =>
                {
                    b.Navigation("BookingServices");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Sticker", b =>
                {
                    b.Navigation("PhotoSticker");
                });

            modelBuilder.Entity("PhotoboothBranchService.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Refunds");
                });
#pragma warning restore 612, 618
        }
    }
}
